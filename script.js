function checkPassword() {
    const passwordInput = document.getElementById('password-input').value;
    const errorMessage = document.getElementById('error-message');

    if (passwordInput === 'practicum') {
        document.getElementById('loading-screen').style.display = 'none';
    } else {
        errorMessage.classList.remove('hidden');
    }
}

function showAssessmentFields() {
    document.getElementById('assessment-fields').classList.remove('hidden');
    document.getElementById('review-status-fields').classList.add('hidden');
    document.getElementById('characters-fields').classList.add('hidden');
    document.getElementById('test-results-fields').classList.add('hidden');
    document.getElementById('assessment-image').classList.remove('hidden');  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É "ass.png"
}

function showReviewStatusFields() {
    document.getElementById('review-status-fields').classList.remove('hidden');
    document.getElementById('assessment-fields').classList.add('hidden');
    document.getElementById('characters-fields').classList.add('hidden');
    document.getElementById('test-results-fields').classList.add('hidden');
    document.getElementById('assessment-image').classList.add('hidden');  // –ü—Ä—è—á–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É "ass.png", –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –ø–æ–∫–∞–∑–∞–Ω–∞
}

function showCharactersFields() {
    document.getElementById('characters-fields').classList.remove('hidden');
    document.getElementById('assessment-fields').classList.add('hidden');
    document.getElementById('review-status-fields').classList.add('hidden');
    document.getElementById('test-results-fields').classList.add('hidden');
    document.getElementById('assessment-image').classList.add('hidden');  // –ü—Ä—è—á–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É "ass.png", –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –ø–æ–∫–∞–∑–∞–Ω–∞
}

function showTestResultsFields() {
    document.getElementById('test-results-fields').classList.remove('hidden');
    document.getElementById('assessment-fields').classList.add('hidden');
    document.getElementById('review-status-fields').classList.add('hidden');
    document.getElementById('characters-fields').classList.add('hidden');
    document.getElementById('assessment-image').classList.add('hidden');  // –ü—Ä—è—á–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É "ass.png", –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –ø–æ–∫–∞–∑–∞–Ω–∞
}

function showTestResultsOptions() {
    const selectedOption = document.getElementById('test-results-type').value;
    const testResultsImage = document.getElementById('test-results-image');
    document.getElementById('test-results-open-entrance-fields').classList.add('hidden');
    document.getElementById('test-results-open-exit-fields').classList.add('hidden');
    document.getElementById('test-results-display-entrance-fields').classList.add('hidden');
    document.getElementById('test-results-display-exit-fields').classList.add('hidden');
    testResultsImage.classList.add('hidden');

    if (selectedOption === 'open-entrance') {
        testResultsImage.src = 'test_enter.png';
        testResultsImage.classList.remove('hidden');
        document.getElementById('test-results-open-entrance-fields').classList.remove('hidden');
    } else if (selectedOption === 'open-exit') {
        testResultsImage.src = 'test_exit.png';
        testResultsImage.classList.remove('hidden');
        document.getElementById('test-results-open-exit-fields').classList.remove('hidden');
    } else if (selectedOption === 'display-entrance') {
        testResultsImage.src = 'enter.png';
        testResultsImage.classList.remove('hidden');
        document.getElementById('test-results-display-entrance-fields').classList.remove('hidden');
    } else if (selectedOption === 'display-exit') {
        testResultsImage.src = 'exit.png';
        testResultsImage.classList.remove('hidden');
        document.getElementById('test-results-display-exit-fields').classList.remove('hidden');
    }
}

function showNotAvailable() {
    showNotification('–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –í —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –ø–æ—è–≤–∏—Ç—Å—è üòé', true);
}

function generateKeys() {
    const courseSlug = document.getElementById('course-slug').value;
    const moduleCount = parseInt(document.getElementById('module-count').value);
    const courseLinks = document.getElementById('course-links').value.split('\n');
    const moduleNames = document.getElementById('module-names').value.split('\n');

    const keyContainer = document.getElementById('generated-keys');
    const keysDiv = keyContainer.querySelector('.keys');
    keysDiv.innerHTML = '';

    if (!courseSlug || !moduleCount || courseLinks.length === 0 || moduleNames.length === 0) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.', true);
        return;
    }

    courseLinks.forEach((link, index) => {
        const lessonId = extractLessonId(link);

        const keys = [
            `assessmentsFeedback.assessment.${lessonId}.grade.average.recommendationCard.1.link`,
            `assessmentsFeedback.assessment.${lessonId}.grade.low.recommendationCard.1.link`,
            `assessmentsFeedback.assessment.${lessonId}.grade.average.recommendationCard.1.title`,
            `assessmentsFeedback.assessment.${lessonId}.grade.low.recommendationCard.1.title`,
            `assessmentsFeedback.assessment.${lessonId}.grade.average.recommendationCard.1.pictureUrl`,
            `assessmentsFeedback.assessment.${lessonId}.grade.low.recommendationCard.1.pictureUrl`,
            `assessmentsFeedback.assessment.${lessonId}.grade.average.recommendationCards.count`,
            `assessmentsFeedback.assessment.${lessonId}.grade.low.recommendationCards.count`
        ];

        keys.forEach((key, keyIndex) => {
            const keyRow = document.createElement('div');
            keyRow.classList.add('key-row');

            const keyField = document.createElement('input');
            keyField.type = 'text';
            keyField.value = key;
            keyField.readOnly = true;

            const copyButton = document.createElement('button');
            copyButton.classList.add('copy-button');
            copyButton.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á';
            copyButton.onclick = () => copyToClipboard(key);

            const description = document.createElement('input');
            description.type = 'text';
            description.value = generateDescription(keyIndex, courseSlug, moduleNames[index], index + 1);
            description.readOnly = true;

            const copyTextButton = document.createElement('button');
            copyTextButton.classList.add('copy-text-button');
            copyTextButton.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–ª—é—á–∞';
            copyTextButton.onclick = () => {
                copyToClipboard(description.value);
                showNotification('–¢–µ–∫—Å—Ç –∫–ª—é—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
            };

            keyRow.appendChild(keyField);
            keyRow.appendChild(copyButton);
            keyRow.appendChild(description);
            keyRow.appendChild(copyTextButton);

            keysDiv.appendChild(keyRow);
        });
    });

    keyContainer.classList.remove('hidden');
}

function generateReviewKeys() {
    const professionSlug = document.getElementById('profession-slug').value;
    const keyContainer = document.getElementById('generated-keys');
    const keysDiv = keyContainer.querySelector('.keys');
    keysDiv.innerHTML = '';

    if (!professionSlug) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–∞–≥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏.', true);
        return;
    }

    const reviewSLAKey = `reviewStatus.${professionSlug}.reviewSLA`;
    const reviewSLADescription = '–í —Ç–∞–Ω–∫–µ—Ä–µ —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã';

    const reviewKeys = [
        {
            key: `proficiency.review.status.${professionSlug}.taskWaitsReview`,
            description: `–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏.<br>–û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤.`
        },
        {
            key: `proficiency.review.status.${professionSlug}.reviewInProcess`,
            description: `–†–∞–±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–µ–≤—å—é.<br>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–π–º—ë—Ç –Ω–µ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤. –ï—Å–ª–∏ —Å—É—Ç–∫–∏ –ø—Ä–æ—à–ª–∏, –∞ —Ä–∞–±–æ—Ç–∞ –≤—Å—ë –µ—â—ë –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫—É—Ä–∞—Ç–æ—Ä—É.`
        },
        {
            key: `proficiency.review.status.${professionSlug}.testsPassed`,
            description: `–¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã, –∏ –∑–∞–¥–∞–Ω–∏–µ –æ–∂–∏–¥–∞–µ—Ç —Ä–µ–≤—å—é.<br>–û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤.`
        }
    ];

    // Create and append review SLA key and description
    const reviewSLARow = document.createElement('div');
    reviewSLARow.classList.add('key-row');

    const reviewSLAField = document.createElement('input');
    reviewSLAField.type = 'text';
    reviewSLAField.value = reviewSLAKey;
    reviewSLAField.readOnly = true;

    const copySLAButton = document.createElement('button');
    copySLAButton.classList.add('copy-button');
    copySLAButton.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á';
    copySLAButton.onclick = () => copyToClipboard(reviewSLAKey);

    const reviewSLADescriptionField = document.createElement('input');
    reviewSLADescriptionField.type = 'text';
    reviewSLADescriptionField.value = reviewSLADescription;
    reviewSLADescriptionField.readOnly = true;

    const copySLADescriptionButton = document.createElement('button');
    copySLADescriptionButton.classList.add('copy-text-button');
    copySLADescriptionButton.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–ª—é—á–∞';
    copySLADescriptionButton.onclick = () => {
        copyToClipboard(reviewSLADescription);
        showNotification('–¢–µ–∫—Å—Ç –∫–ª—é—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    };

    reviewSLARow.appendChild(reviewSLAField);
    reviewSLARow.appendChild(copySLAButton);
    reviewSLARow.appendChild(reviewSLADescriptionField);
    reviewSLARow.appendChild(copySLADescriptionButton);

    keysDiv.appendChild(document.createTextNode('üîë –ö–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –º–µ–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Ä–µ–≤—å—é:'));
    keysDiv.appendChild(reviewSLARow);

    // Create and append review text keys and descriptions
    keysDiv.appendChild(document.createTextNode('üîë –ö–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω—è—é—Ç —Ç–µ–∫—Å—Ç –ø—Ä–∏ —Ä–µ–≤—å—é:'));
    keysDiv.appendChild(document.createTextNode('–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–∫—Å—Ç —Å SLA –¥–ª—è –≤—Å–µ—Ö —Ä–∞–±–æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:'));

    reviewKeys.forEach(({ key, description }) => {
        const keyRow = document.createElement('div');
        keyRow.classList.add('key-row');

        const keyField = document.createElement('input');
        keyField.type = 'text';
        keyField.value = key;
        keyField.readOnly = true;

        const copyButton = document.createElement('button');
        copyButton.classList.add('copy-button');
        copyButton.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á';
        copyButton.onclick = () => copyToClipboard(key);

        const descriptionField = document.createElement('input');
        descriptionField.type = 'text';
        descriptionField.value = description;
        descriptionField.readOnly = true;

        const copyTextButton = document.createElement('button');
        copyTextButton.classList.add('copy-text-button');
        copyTextButton.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–ª—é—á–∞';
        copyTextButton.onclick = () => {
            copyToClipboard(description);
            showNotification('–¢–µ–∫—Å—Ç –∫–ª—é—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        };

        keyRow.appendChild(keyField);
        keyRow.appendChild(copyButton);
        keyRow.appendChild(descriptionField);
        keyRow.appendChild(copyTextButton);

        keysDiv.appendChild(keyRow);
    });

    keyContainer.classList.remove('hidden');
}

function generateCharacterKeys() {
    const characterTag = document.getElementById('character-tag').value;
    const characterName = document.getElementById('character-name').value;
    const characterAvatar = document.getElementById('character-avatar').value;

    const keyContainer = document.getElementById('generated-keys');
    const keysDiv = keyContainer.querySelector('.keys');
    keysDiv.innerHTML = '';

    if (!characterTag || !characterName || !characterAvatar) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.', true);
        return;
    }

    const characterKeys = [
        {
            key: `dialog.characters.${characterTag}.name`,
            description: characterName
        },
        {
            key: `dialog.characters.${characterTag}.avatar`,
            description: characterAvatar
        }
    ];

    keysDiv.appendChild(document.createTextNode('üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:'));

    characterKeys.forEach(({ key, description }) => {
        const keyRow = document.createElement('div');
        keyRow.classList.add('key-row');

        const keyField = document.createElement('input');
        keyField.type = 'text';
        keyField.value = key;
        keyField.readOnly = true;

        const copyButton = document.createElement('button');
        copyButton.classList.add('copy-button');
        copyButton.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á';
        copyButton.onclick = () => copyToClipboard(key);

        const descriptionField = document.createElement('input');
        descriptionField.type = 'text';
        descriptionField.value = description;
        descriptionField.readOnly = true;

        const copyTextButton = document.createElement('button');
        copyTextButton.classList.add('copy-text-button');
        copyTextButton.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–ª—é—á–∞';
        copyTextButton.onclick = () => {
            copyToClipboard(description);
            showNotification('–¢–µ–∫—Å—Ç –∫–ª—é—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        };

        keyRow.appendChild(keyField);
        keyRow.appendChild(copyButton);
        keyRow.appendChild(descriptionField);
        keyRow.appendChild(copyTextButton);

        keysDiv.appendChild(keyRow);
    });

    keyContainer.classList.remove('hidden');
}

function generateTestResultsOpenEntranceKeys() {
    const professionSlug = document.getElementById('test-results-open-entrance-profession-slug').value;
    const keyContainer = document.getElementById('generated-keys');
    const keysDiv = keyContainer.querySelector('.keys');
    keysDiv.innerHTML = '';

    if (!professionSlug) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–∞–≥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏.', true);
        return;
    }

    const buttonKeys = [
        {
            key: `assessmentsFeedback.resultsCard.${professionSlug}.title`,
            description: `–í –Ω–∞—á–∞–ª–µ –∫—É—Ä—Å–∞ –º—ã –¥–∞–ª–∏ –≤–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞`
        },
        {
            key: `assessmentsFeedback.resultsCard.${professionSlug}.text`,
            description: `–ú—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –∏—Ö –∏ —Å–æ—Å—Ç–∞–≤–∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚Äî —Ç–∞–∫ –ø—Ä–æ—â–µ –ø–æ–Ω—è—Ç—å, –≥–¥–µ –º–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è, –∞ –∫–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å`
        },
        {
            key: `assessmentsFeedback.resultsCard.${professionSlug}.openFeedbackButtonText`,
            description: `–ü–æ–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Ç–∞–º`
        },
        {
            key: `assessmentsFeedback.resultsCard.${professionSlug}.pictureUrl`,
            description: `https://code.s3.yandex.net/Assessments/entrance-assessments-feedback-card-picture.png`
        }
    ];

    keysDiv.appendChild(document.createTextNode('üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:'));

    buttonKeys.forEach(({ key, description }) => {
        const keyRow = document.createElement('div');
        keyRow.classList.add('key-row');

        const keyField = document.createElement('input');
        keyField.type = 'text';
        keyField.value = key;
        keyField.readOnly = true;

        const copyButton = document.createElement('button');
        copyButton.classList.add('copy-button');
        copyButton.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á';
        copyButton.onclick = () => copyToClipboard(key);

        const descriptionField = document.createElement('input');
        descriptionField.type = 'text';
        descriptionField.value = description;
        descriptionField.readOnly = true;

        const copyTextButton = document.createElement('button');
        copyTextButton.classList.add('copy-text-button');
        copyTextButton.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–ª—é—á–∞';
        copyTextButton.onclick = () => {
            copyToClipboard(description);
            showNotification('–¢–µ–∫—Å—Ç –∫–ª—é—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        };

        keyRow.appendChild(keyField);
        keyRow.appendChild(copyButton);
        keyRow.appendChild(descriptionField);
        keyRow.appendChild(copyTextButton);

        keysDiv.appendChild(keyRow);
    });

    keyContainer.classList.remove('hidden');
}

function generateTestResultsOpenExitKeys() {
    const professionSlug = document.getElementById('test-results-open-exit-profession-slug').value;
    const keyContainer = document.getElementById('generated-keys');
    const keysDiv = keyContainer.querySelector('.keys');
    keysDiv.innerHTML = '';

    if (!professionSlug) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–∞–≥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏.', true);
        return;
    }

    const buttonKeys = [
        {
            key: `exitAssessmentsFeedback.resultsCard.${professionSlug}.title`,
            description: `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞`
        },
        {
            key: `exitAssessmentsFeedback.resultsCard.${professionSlug}.text`,
            description: `–í—ã—Ö–æ–¥–Ω–æ–π —Ç–µ—Å—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É–∑–Ω–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–∏—Ö –∑–Ω–∞–Ω–∏–π –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ. –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∞ –º—ã –≤—ã—à–ª–µ–º –≤–∞–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤–ª–∞–¥–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–º –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–æ–¥—É–ª–∏.`
        },
        {
            key: `exitAssessmentsFeedback.resultsCard.${professionSlug}.openFeedbackButtonText`,
            description: `–£–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã`
        },
        {
            key: `exitAssessmentsFeedback.resultsCard.${professionSlug}.pictureUrl`,
            description: `https://code.s3.yandex.net/Assessments/results-card-picture.png`
        }
    ];

    keysDiv.appendChild(document.createTextNode('üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:'));

    buttonKeys.forEach(({ key, description }) => {
        const keyRow = document.createElement('div');
        keyRow.classList.add('key-row');

        const keyField = document.createElement('input');
        keyField.type = 'text';
        keyField.value = key;
        keyField.readOnly = true;

        const copyButton = document.createElement('button');
        copyButton.classList.add('copy-button');
        copyButton.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á';
        copyButton.onclick = () => copyToClipboard(key);

        const descriptionField = document.createElement('input');
        descriptionField.type = 'text';
        descriptionField.value = description;
        descriptionField.readOnly = true;

        const copyTextButton = document.createElement('button');
        copyTextButton.classList.add('copy-text-button');
        copyTextButton.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–ª—é—á–∞';
        copyTextButton.onclick = () => {
            copyToClipboard(description);
            showNotification('–¢–µ–∫—Å—Ç –∫–ª—é—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        };

        keyRow.appendChild(keyField);
        keyRow.appendChild(copyButton);
        keyRow.appendChild(descriptionField);
        keyRow.appendChild(copyTextButton);

        keysDiv.appendChild(keyRow);
    });

    keyContainer.classList.remove('hidden');
}

function generateTestResultsDisplayEntranceKeys() {
    const professionSlug = document.getElementById('test-results-display-entrance-profession-slug').value;
    const keyContainer = document.getElementById('generated-keys');
    const keysDiv = keyContainer.querySelector('.keys');
    keysDiv.innerHTML = '';

    if (!professionSlug) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–∞–≥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏.', true);
        return;
    }

    const resultKeys = [
        {
            key: `assessmentsFeedback.averageResult.grade.low.${professionSlug}.content.md`,
            description: `–¢–µ–∫—Å—Ç –æ—Ç –∞–≤—Ç–æ—Ä–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≥–æ–Ω–∏—Ç–µ –≤ [–¢–∏–ø–æ–≥—Ä–∞—Ñ–µ](https://www.artlebedev.ru/typograf/)`
        },
        {
            key: `assessmentsFeedback.averageResult.grade.average.${professionSlug}.content.md`,
            description: `–¢–µ–∫—Å—Ç –æ—Ç –∞–≤—Ç–æ—Ä–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≥–æ–Ω–∏—Ç–µ –≤ [–¢–∏–ø–æ–≥—Ä–∞—Ñ–µ](https://www.artlebedev.ru/typograf/)`
        },
        {
            key: `assessmentsFeedback.averageResult.grade.high.${professionSlug}.content.md`,
            description: `–¢–µ–∫—Å—Ç –æ—Ç –∞–≤—Ç–æ—Ä–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≥–æ–Ω–∏—Ç–µ –≤ [–¢–∏–ø–æ–≥—Ä–∞—Ñ–µ](https://www.artlebedev.ru/typograf/)`
        }
    ];

    keysDiv.appendChild(document.createTextNode('üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:'));

    resultKeys.forEach(({ key, description }) => {
        const keyRow = document.createElement('div');
        keyRow.classList.add('key-row');

        const keyField = document.createElement('input');
        keyField.type = 'text';
        keyField.value = key;
        keyField.readOnly = true;

        const copyButton = document.createElement('button');
        copyButton.classList.add('copy-button');
        copyButton.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á';
        copyButton.onclick = () => copyToClipboard(key);

        const descriptionField = document.createElement('input');
        descriptionField.type = 'text';
        descriptionField.value = description;
        descriptionField.readOnly = true;

        const copyTextButton = document.createElement('button');
        copyTextButton.classList.add('copy-text-button');
        copyTextButton.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–ª—é—á–∞';
        copyTextButton.onclick = () => {
            copyToClipboard(description);
            showNotification('–¢–µ–∫—Å—Ç –∫–ª—é—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        };

        keyRow.appendChild(keyField);
        keyRow.appendChild(copyButton);
        keyRow.appendChild(descriptionField);
        keyRow.appendChild(copyTextButton);

        keysDiv.appendChild(keyRow);
    });

    keyContainer.classList.remove('hidden');
}

function generateTestResultsDisplayExitKeys() {
    const professionSlug = document.getElementById('test-results-display-exit-profession-slug').value;
    const keyContainer = document.getElementById('generated-keys');
    const keysDiv = keyContainer.querySelector('.keys');
    keysDiv.innerHTML = '';

    if (!professionSlug) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–∞–≥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏.', true);
        return;
    }

    const resultKeys = [
        {
            key: `exitAssessmentsFeedback.averageResult.grade.pass.${professionSlug}.content.md`,
            description: `–¢–µ–∫—Å—Ç –æ—Ç –∞–≤—Ç–æ—Ä–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≥–æ–Ω–∏—Ç–µ –≤ [–¢–∏–ø–æ–≥—Ä–∞—Ñ–µ](https://www.artlebedev.ru/typograf/)`
        },
        {
            key: `exitAssessmentsFeedback.averageResult.grade.no_pass.${professionSlug}.content.md`,
            description: `–¢–µ–∫—Å—Ç –æ—Ç –∞–≤—Ç–æ—Ä–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≥–æ–Ω–∏—Ç–µ –≤ [–¢–∏–ø–æ–≥—Ä–∞—Ñ–µ](https://www.artlebedev.ru/typograf/)`
        }
    ];

    keysDiv.appendChild(document.createTextNode('üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:'));

    resultKeys.forEach(({ key, description }) => {
        const keyRow = document.createElement('div');
        keyRow.classList.add('key-row');

        const keyField = document.createElement('input');
        keyField.type = 'text';
        keyField.value = key;
        keyField.readOnly = true;

        const copyButton = document.createElement('button');
        copyButton.classList.add('copy-button');
        copyButton.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á';
        copyButton.onclick = () => copyToClipboard(key);

        const descriptionField = document.createElement('input');
        descriptionField.type = 'text';
        descriptionField.value = description;
        descriptionField.readOnly = true;

        const copyTextButton = document.createElement('button');
        copyTextButton.classList.add('copy-text-button');
        copyTextButton.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–ª—é—á–∞';
        copyTextButton.onclick = () => {
            copyToClipboard(description);
            showNotification('–¢–µ–∫—Å—Ç –∫–ª—é—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        };

        keyRow.appendChild(keyField);
        keyRow.appendChild(copyButton);
        keyRow.appendChild(descriptionField);
        keyRow.appendChild(copyTextButton);

        keysDiv.appendChild(keyRow);
    });

    keyContainer.classList.remove('hidden');
}

function extractLessonId(link) {
    const regex = /lessons\/([a-z0-9-]+)\//;
    const match = link.match(regex);
    return match ? match[1] : '';
}

function generateDescription(index, courseSlug, moduleName, moduleIndex) {
    const moduleImages = [
        'https://pictures.s3.yandex.net/resources/module_1_1703234174.svg',
        'https://pictures.s3.yandex.net/resources/module_2_1703234182.svg',
        'https://pictures.s3.yandex.net/resources/module_3_1703234324.svg',
        'https://pictures.s3.yandex.net/resources/module_4_1703173151.svg',
        'https://pictures.s3.yandex.net/resources/module_5_1712064865.svg',
        'https://pictures.s3.yandex.net/resources/module_6_1712065452.svg',
        'https://pictures.s3.yandex.net/resources/module_7_1712057230.svg'
    ];

    switch (index) {
        case 0:
        case 1:
            return '–í—Ä—É—á–Ω—É—é –≤–æ–∑—å–º–∏ —Å—Å—ã–ª–∫—É –∏–∑ –ø—Ä–µ—Å—Ç–∞ –Ω–∞ —É—Ä–æ–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –¥–æ–ª–∂–Ω–∞ –≤–µ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è';
        case 2:
            return `–õ—É—á—à–µ –ø–æ–¥—Ç—è–Ω—É—Ç—å: ${moduleName}`;
        case 3:
            return `–¢–æ—á–Ω–æ —Å—Ç–æ–∏—Ç –ø–æ–¥—Ç—è–Ω—É—Ç—å: ${moduleName}`;
        case 4:
        case 5:
            return moduleImages[moduleIndex - 1];
        case 6:
        case 7:
            return '1';
        default:
            return '';
    }
}

function copyToClipboard(text) {
    const textarea = document.createElement('textarea');
    textarea.value = text;
    document.body.appendChild(textarea);
    textarea.select();
    document.execCommand('copy');
    document.body.removeChild(textarea);

    showNotification('–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
}

function showNotification(message, isError = false) {
    const notification = document.getElementById('notification');
    notification.textContent = message;
    notification.classList.remove('hidden');
    notification.classList.toggle('error', isError);
    setTimeout(() => {
        notification.classList.add('hidden');
    }, 2000);
}
